{"name":"Define-strict-properties","tagline":"","body":"define-strict-properties\r\n========================\r\n\r\ndefining types in JavaScript via ES5 compatible descriptors\r\n\r\n[![build status](https://secure.travis-ci.org/WebReflection/define-strict-properties.png)](http://travis-ci.org/WebReflection/define-strict-properties)\r\n\r\n\r\n### Object.create(proto, typedProperties)\r\nFollowing all goals of this project:\r\n\r\n  * **zero performance impact**, all you have to do is to **not** include [the main file](build/define-strict-properties.max.js) in production\r\n  * **fully ES5 backward compatible**, it works with [ES5 descriptors](http://www.ecma-international.org/ecma-262/5.1/#sec-8.10) already in your code, nothing to change\r\n  * **methods and signatures overload**, you can accept one or more arguments and of different type, just specify them\r\n  * **multiple returns type**, you can return one or more variable type\r\n  * **no syntax changes**, which means no broken JavaScript, no need for transpilers, no need for source maps, no need for ... you name it, it's just vanilla JavaScript with the ability to specify types via descriptors!\r\n\r\nAs virtual ideal goal bonus, JavaScript engines could follow this proposal to boost up performance via typed properties, same way property access is planned to be optimized in [Typed Object](http://wiki.ecmascript.org/doku.php?id=harmony:typed_objects) too except this proposal is also suitable for runtime operations instead of static shapes only.\r\n\r\nThis project could also be used to actually implement StructType polyfills for ES5 browsers.\r\n\r\n### Compatibility\r\nEvery browser that is compatible with ES5 specifications, including:\r\n\r\n  * IE9+, and IEMobile 9+\r\n  * any Webkit based browser (Safari, Android 2+, Kindle Silk, Blackberry, PhantomJS, etc, etc)\r\n  * any Chrome and Mobile Chrome,\r\n  * any Opera 12+ plus mobile and mini\r\n\r\nTo check if your browser supports this script without extra polyfills, feel free to [check the test page](http://webreflection.github.io/define-strict-properties/test/).\r\n\r\n### Regular ES5 Descriptors\r\nES5 descriptors are objects usually created at runtime able to define properties in a powerful way.\r\nFollowing a quick summary about ES5 descriptors:\r\n\r\n```javascript\r\nObject.defineProperty(genericObject, {\r\n\r\n  // will it show up in for/in or in Object.keys() ?\r\n  enumerable: true,   // false by default\r\n  // is it possible to redefine this value \r\n  // using Object.defineProperty again ?\r\n  configurable: true, // false by default\r\n\r\n\r\n  // defining property directly\r\n\r\n  // specify if the value can change at runtime\r\n  writable: true,     // false by default\r\n  // the property value\r\n  value: any,\r\n\r\n\r\n  // defining property via getters/setters\r\n  // (no writable allowed by specs)\r\n\r\n  // the getter, returns anything, even methods\r\n  get: function () {\r\n    return any;\r\n  },\r\n\r\n  // the setter, will receive the set value\r\n  // obj.prop = anyValue;\r\n  set: function (anyValue) {\r\n    any = anyValue;\r\n  }\r\n\r\n});\r\n```\r\n\r\n\r\n### Enriched ES5 Descriptors\r\nIf you include [define-strict-properties](build/define-strict-properties.max.js) before other scripts in your development environment, you'll be able to do more with descriptors preserving native ES5 behavior.\r\n\r\n\r\n### Types\r\nThese are the types that work exactly the same when specified as `arguments`, `returns`, or `type` fields in the descriptor.\r\n\r\n  * **\"boolean\"**, as `typeof obj === 'boolean'`\r\n  * **\"function\"**, as `typeof obj === 'function'`\r\n  * **\"number\"**, as `typeof obj === 'number'`\r\n  * **\"object\"**, as `typeof obj === 'object'`, including `null`, no surprises here, is still JS as it is\r\n  * **\"string\"**, as `typeof obj === 'string'`\r\n  * **\"undefined\"**, as `typeof obj === 'undefined'`, it looks pointless but it can actually become handy if there is some property that should be flagged as _reserved_ and accessing it should throw an error\r\n  * **\"any\"**, as any kind of value, it will accept really anything, basically a white flag for the typeof filter\r\n  * **Constructor**, validated as `obj instanceof Constructor`\r\n  * **genericObject**, validated as `genericObject.isPrototypeOf(obj)`, particularly handy if you use `Object.create(fromObject)` instead of constructors for new objects instead of classes\r\n\r\nFollowing few examples on how to use them.\r\n\r\n### Typed Value\r\n```javascript\r\n// basic descriptor example\r\nObject.defineProperty(genericObject, {\r\n  type: 'number',\r\n  writable: true,\r\n  value: 123\r\n});\r\n\r\n// via multiple descriptors\r\nvar typed = Object.create(null, {\r\n  method: {\r\n    type: 'function',\r\n    writable: true,\r\n    value: function () {\r\n      // it can be change even later on\r\n      // with another method\r\n    }\r\n    // keep reading for arguments\r\n    // and returns type\r\n  },\r\n  property: {\r\n    type: 'string',\r\n    value: 'Hello There!'\r\n  },\r\n  instance: {\r\n    type: HTMLElement,\r\n    value: document.createElement('canvas')\r\n  },\r\n  proto: {\r\n    type: someObjectThatIsPrototypeOf,\r\n    value: anotherOne\r\n  }\r\n});\r\n```\r\n\r\n### Methods `arguments`\r\n```javascript\r\n\r\nfunction Person(name) {\r\n  this.name = name;\r\n}\r\n\r\nObject.defineProperties(\r\n  Person.prototype, {\r\n\r\n  // properties\r\n  // easy to ensure types\r\n  title: {\r\n    writable: true,\r\n    type: 'string',\r\n    value: '' // as default\r\n  },\r\n  age: {\r\n    writable: true,\r\n    type: 'number',\r\n    value: 0\r\n  },\r\n  name: {\r\n    writable: true,\r\n    type: 'string'\r\n  },\r\n\r\n  // methods are easily\r\n  // ensured by default as not enumerable\r\n  // not configurable and not writable\r\n  // so that is not possible to change\r\n  // them during a class lifecycle\r\n  // and this is normal ES5 behavior ;-)\r\n  promoteTo: {\r\n    // only one argument, as string\r\n    arguments: ['string'],\r\n    value: function (title) {\r\n      this.title = title + ' ';\r\n    }\r\n  },\r\n\r\n  toString: {\r\n    returns: ['string'],\r\n    value: function () {\r\n      return this.title + this.name;\r\n    }\r\n  }\r\n\r\n});\r\n\r\nvar me = new Person('Andrea');\r\nme.promoteTo('Mr');\r\nme.age = 35;\r\nconsole.log('' + me); // Mr Andrea\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}